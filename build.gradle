group 'ca.waterloo.dsg'
version '0.1.0'

apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'maven'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7"

    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile 'org.apache.logging.log4j:log4j-api:2.8.2'
    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    compile 'org.projectlombok:lombok:1.18.0'
    compile 'com.google.code.gson:gson:2.8.2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.8.0'
    testCompile 'org.mockito:mockito-core:2.9.0'
}

// ANTLR4 configuration.
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += [
        "-long-messages",                                   // show exception details
        "-visitor",                                         // generate parse tree visitor classes
        "-package", "ca.waterloo.dsg.graphflow.grammar"     // specify package for generated classes
    ]
}
// Add the source files generated by ANTLR4 to the gradle sourcesets.
sourceSets.main.java.srcDirs += "$buildDir/generated-src/antlr/main"

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    // Enable additional compile time warnings.
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-cast" << "-Xlint:-serial"
    // Enable incremental builds. Disable if giving errors.
    options.incremental = true
}

apply plugin: 'application'
// Disable the default assembly tasks.
startScripts.enabled = false
run.enabled = false
distZip.enabled = false
distTar.enabled = false
// Create the executables.
def scripts = [
    'dataset-serializer'  : 'ca.waterloo.dsg.graphflow.runner.dataset.DatasetSerializer',
    'catalog-serializer'  : 'ca.waterloo.dsg.graphflow.runner.dataset.CatalogSerializer',
    'optimizer-executor' : 'ca.waterloo.dsg.graphflow.runner.plan.OptimizerExecutor'
]
scripts.each() { fileName, className ->
    tasks.create(name: fileName, type: CreateStartScripts) {
        mainClassName = className
        applicationName = fileName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    applicationDistribution.into("bin") {
        from(tasks[fileName])
        fileMode = 0755
    }
}

// Define specific gradle version.
task wrapper(type: Wrapper) {
    gradleVersion = '4.0.1'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }
}
